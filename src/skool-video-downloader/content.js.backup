// Content script - runs on Skool classroom pages
// Version 1.3.2 - Built from modular files
// This file is auto-generated. Edit the source files in js/ directory instead.

// === UTILS ===
// Utility functions

// Check if element is visible on the page
function isElementVisible(element) {
    const rect = element.getBoundingClientRect();
    const style = window.getComputedStyle(element);
    
    return (
        rect.width > 0 &&
        rect.height > 0 &&
        style.display !== 'none' &&
        style.visibility !== 'hidden' &&
        style.opacity !== '0' &&
        rect.top < window.innerHeight &&
        rect.bottom > 0
    );
}

// Extract video ID from various URL formats
function extractVideoId(url, platform) {
    switch (platform) {
        case 'youtube':
            return extractYouTubeId(url);
        case 'loom':
            return extractLoomId(url);
        case 'vimeo':
            return extractVimeoId(url);
        case 'wistia':
            return extractWistiaId(url);
        default:
            return null;
    }
}

// YouTube ID extraction
function extractYouTubeId(url) {
    const patterns = [
        /(?:youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/,
        /youtube\.com\/embed\/([a-zA-Z0-9_-]+)/,
        /youtube\.com\/v\/([a-zA-Z0-9_-]+)/
    ];
    
    for (const pattern of patterns) {
        const match = url.match(pattern);
        if (match) return match[1];
    }
    return null;
}

// Loom ID extraction
function extractLoomId(url) {
    const match = url.match(/loom\.com\/(?:share|embed)\/([a-zA-Z0-9]+)/);
    return match ? match[1] : null;
}

// Vimeo ID extraction
function extractVimeoId(url) {
    const match = url.match(/vimeo\.com\/(?:video\/)?([0-9]+)/);
    return match ? match[1] : null;
}

// Wistia ID extraction
function extractWistiaId(url) {
    const match = url.match(/(?:wistia\.com|wistia\.net)\/(?:medias|embed)\/(?:iframe\/)?([a-zA-Z0-9]+)/);
    return match ? match[1] : null;
}

// Detect platform from URL
function detectPlatform(url) {
    if (url.includes('youtube.com') || url.includes('youtu.be')) return 'youtube';
    if (url.includes('loom.com')) return 'loom';
    if (url.includes('vimeo.com')) return 'vimeo';
    if (url.includes('wistia.com') || url.includes('wistia.net')) return 'wistia';
    return 'unknown';
}

// Clean and normalize video URLs
function normalizeVideoUrl(url, platform, videoId) {
    switch (platform) {
        case 'youtube':
            return `https://www.youtube.com/watch?v=${videoId}`;
        case 'loom':
            return `https://www.loom.com/share/${videoId}`;
        case 'vimeo':
            return `https://vimeo.com/${videoId}`;
        case 'wistia':
            return `https://fast.wistia.net/embed/iframe/${videoId}`;
        default:
            return url;
    }
}

// Get download command with quality settings
function getDownloadCommand(videoUrl, videoType, isWindows = false) {
    let baseCommand = 'yt-dlp ';
    
    // Add quality and format flags based on video type
    switch (videoType) {
        case 'youtube':
            // Best quality up to 1080p with merged audio
            baseCommand += '-f "bestvideo[height<=1080]+bestaudio/best[height<=1080]" --merge-output-format mp4 ';
            break;
        case 'vimeo':
            // Add referer header for Vimeo to avoid OAuth errors
            baseCommand += '--add-header "Referer: https://vimeo.com" ';
            break;
        default:
            // Standard download for other platforms
            break;
    }
    
    // Add output path
    if (isWindows) {
        baseCommand += `-P %USERPROFILE%\\\\Desktop "${videoUrl}"`;
    } else {
        baseCommand += `-P ~/Desktop '${videoUrl}'`;
    }
    
    return baseCommand;
}

// Find nearest title element
function findNearestTitle(element) {
    // First check parent containers
    let parent = element.parentElement;
    let depth = 0;
    
    while (parent && depth < 5) {
        // Check for headings in parent
        const heading = parent.querySelector('h1, h2, h3, h4, h5, h6');
        if (heading && heading.textContent.trim()) {
            return heading;
        }
        
        // Check siblings
        const prevSibling = parent.previousElementSibling;
        if (prevSibling) {
            const siblingHeading = prevSibling.querySelector('h1, h2, h3, h4, h5, h6');
            if (siblingHeading && siblingHeading.textContent.trim()) {
                return siblingHeading;
            }
        }
        
        parent = parent.parentElement;
        depth++;
    }
    
    return null;
}

// === VIDEO DETECTION ===
// Video detection logic - DOM-based detection

// Extract video from iframe element
function extractVideoFromIframe(iframe) {
    const src = iframe.src;
    if (!src) return null;
    
    const platform = detectPlatform(src);
    const videoId = extractVideoId(src, platform);
    
    if (!videoId) return null;
    
    const videoUrl = normalizeVideoUrl(src, platform, videoId);
    
    // Try to get title from iframe
    let title = iframe.title || `${platform.charAt(0).toUpperCase() + platform.slice(1)} Video`;
    
    // Look for title in parent elements if iframe has no title
    if (!iframe.title) {
        const titleElement = findNearestTitle(iframe);
        if (titleElement) {
            title = titleElement.textContent.trim();
        }
    }
    
    return {
        url: videoUrl,
        title: title,
        videoId: videoId,
        type: platform
    };
}

// Find only visible videos on the current page
function findVisibleVideosOnly() {
    const videos = [];
    
    // Check only visible iframes
    const iframes = document.querySelectorAll('iframe');
    for (const iframe of iframes) {
        // Check if iframe is visible
        if (!isElementVisible(iframe)) continue;
        
        const video = extractVideoFromIframe(iframe);
        if (video) {
            videos.push(video);
            // Only return first visible video
            break;
        }
    }
    
    // If no iframe found, check for lazy-loaded videos
    if (videos.length === 0) {
        const videoContainers = document.querySelectorAll(
            '.post-content, .content-body, [class*="post"], [class*="content"], article'
        );
        
        for (const container of videoContainers) {
            if (!isElementVisible(container)) continue;
            
            // Look for video links or thumbnails within visible containers
            const videoElements = container.querySelectorAll(
                'a[href*="youtube"], a[href*="youtu.be"], a[href*="loom"], ' +
                'a[href*="vimeo"], img[src*="ytimg.com"], [data-embed-url]'
            );
            
            for (const element of videoElements) {
                let url = element.href || element.dataset.embedUrl || '';
                
                // For YouTube thumbnails
                if (element.tagName === 'IMG' && element.src.includes('ytimg.com')) {
                    const match = element.src.match(/(?:ytimg\.com\/vi\/)([a-zA-Z0-9_-]+)/);
                    if (match) {
                        url = `https://www.youtube.com/watch?v=${match[1]}`;
                    }
                }
                
                if (url) {
                    const platform = detectPlatform(url);
                    const videoId = extractVideoId(url, platform);
                    
                    if (videoId) {
                        const videoUrl = normalizeVideoUrl(url, platform, videoId);
                        const titleElement = findNearestTitle(element);
                        const title = titleElement ? 
                            titleElement.textContent.trim() : 
                            `${platform.charAt(0).toUpperCase() + platform.slice(1)} Video`;
                        
                        videos.push({
                            url: videoUrl,
                            title: title,
                            videoId: videoId,
                            type: platform
                        });
                        
                        return videos; // Return first found
                    }
                }
            }
        }
    }
    
    return videos;
}

// === MODAL UI ===
// Modal UI functionality

// Show modal with video information
function showModal(data) {
    // Remove existing modal if any
    const existingModal = document.getElementById('skool-video-modal');
    if (existingModal) existingModal.remove();
    
    // Create modal
    const modal = document.createElement('div');
    modal.id = 'skool-video-modal';
    
    if (data.success) {
        const durationStr = data.duration ? 
            `${Math.floor(data.duration/60)}:${(data.duration%60).toString().padStart(2, '0')}` : 
            'Unknown';
        
        // Get platform-specific download commands
        const macCommand = getDownloadCommand(data.videoUrl, data.type || 'unknown', false);
        const winCommand = getDownloadCommand(data.videoUrl, data.type || 'unknown', true);
            
        modal.innerHTML = `
            <div class="modal-content">
                <button class="close-btn" onclick="this.closest('#skool-video-modal').remove()">×</button>
                
                <p class="video-title">"${data.title}"</p>
                <p class="video-duration">Duration: ${durationStr}</p>
                
                <div class="download-section">
                    <h3>Download Instructions</h3>
                    
                    <div class="os-section">
                        <div class="video-url-container">
                            <button onclick="navigator.clipboard.writeText('${macCommand.replace(/'/g, "\\'").replace(/"/g, "&quot;")}'); this.textContent='Copied!'">Copy Mac Command</button>
                        </div>
                        <ol>
                            <li>Click the 'Copy Mac Command' button above</li>
                            <li>Open Terminal application</li>
                            <li>Paste the command & press enter</li>
                        </ol>
                    </div>
                    
                    <div class="os-section">
                        <div class="video-url-container">
                            <button onclick="navigator.clipboard.writeText('${winCommand.replace(/'/g, "\\'").replace(/"/g, "&quot;")}'); this.textContent='Copied!'">Copy Windows Command</button>
                        </div>
                        <ol>
                            <li>Click the 'Copy Windows Command' button above</li>
                            <li>Open Command Prompt (cmd) or PowerShell</li>
                            <li>Paste the command & press enter</li>
                        </ol>
                    </div>
                    
                    <p class="download-note">The video will download to your desktop</p>
                    ${data.type === 'youtube' ? '<p class="download-note" style="color: #059669;">✓ Will download in best quality (up to 1080p)</p>' : ''}
                    ${data.type === 'vimeo' ? '<p class="download-note" style="color: #dc2626;">⚠️ If you get an OAuth error, the video may be private. Try using browser developer tools.</p>' : ''}
                </div>
                
                <div class="youtube-section">
                    <h3>Need help?</h3>
                    <p>If you're stuck ask for help in the <a href="https://serp.ly/@serp/community/support" target="_blank">Community</a></p>
                </div>
            </div>
        `;
    } else {
        modal.innerHTML = `
            <div class="modal-content error">
                <button class="close-btn" onclick="this.closest('#skool-video-modal').remove()">×</button>
                <h2>❌ Error</h2>
                <p>${data.message}</p>
                
                <div class="cta-section">
                    <p>Need help? Check out the tutorial:</p>
                    <a href="https://youtube.com/@devinschumacher" target="_blank" class="cta-button youtube">
                        Watch Tutorial on YouTube
                    </a>
                </div>
            </div>
        `;
    }
    
    document.body.appendChild(modal);
}

// Show modal for multiple videos
function showMultipleVideosModal(videos) {
    const existingModal = document.getElementById('skool-video-modal');
    if (existingModal) existingModal.remove();
    
    const modal = document.createElement('div');
    modal.id = 'skool-video-modal';
    
    let videoButtons = videos.map((video, index) => 
        `<button onclick="showModal({success: true, videoUrl: '${video.url}', title: '${video.title}', duration: null, type: '${video.type || 'unknown'}'}); this.closest('#skool-video-modal').remove()" class="video-select-btn">
            ${video.title}
        </button>`
    ).join('');
    
    modal.innerHTML = `
        <div class="modal-content">
            <button class="close-btn" onclick="this.closest('#skool-video-modal').remove()">×</button>
            <h2>Multiple Videos Found</h2>
            <p>Select a video to download:</p>
            <div class="video-list">
                ${videoButtons}
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
}

// Legacy function for floating button (if needed)
window.downloadVideoUrl = function(url, title) {
    const safeTitle = title.replace(/[^a-z0-9]/gi, '_').toLowerCase().substring(0, 30);
    const content = url;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const downloadUrl = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = downloadUrl;
    a.download = `loom_${safeTitle}.txt`;
    a.click();
    URL.revokeObjectURL(downloadUrl);
}

// Make showModal available globally for inline onclick handlers
window.showModal = showModal;

// === MAIN CONTENT SCRIPT ===
